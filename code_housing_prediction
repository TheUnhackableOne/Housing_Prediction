# Step 1: Import Libraries (same as before)
import torch
import torch.nn as nn
import pandas as pd
import numpy as np
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Steps 2-7 remain the same as previous code
housing = fetch_california_housing()
X = housing.data
y = housing.target

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

X_train_tensor = torch.tensor(X_train, dtype=torch.float32)
y_train_tensor = torch.tensor(y_train, dtype=torch.float32).reshape(-1, 1)
X_test_tensor = torch.tensor(X_test, dtype=torch.float32)
y_test_tensor = torch.tensor(y_test, dtype=torch.float32).reshape(-1, 1)

class HousePricePredictor(nn.Module):
    def __init__(self, input_size):
        super(HousePricePredictor, self).__init__()
        self.network = nn.Sequential(
            nn.Linear(input_size, 64),
            nn.ReLU(),
            nn.Linear(64, 32),
            nn.ReLU(),
            nn.Linear(32, 1)
        )
    
    def forward(self, x):
        return self.network(x)

input_size = X_train.shape[1]
model = HousePricePredictor(input_size)
criterion = nn.MSELoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)

num_epochs = 200
batch_size = 32
train_losses = []

for epoch in range(num_epochs):
    for i in range(0, len(X_train), batch_size):
        batch_X = X_train_tensor[i:i+batch_size]
        batch_y = y_train_tensor[i:i+batch_size]
        
        outputs = model(batch_X)
        loss = criterion(outputs, batch_y)
        
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
    
    train_losses.append(loss.item())
    if (epoch + 1) % 20 == 0:
        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')

# Step 8: Evaluate and Generate Predictions
model.eval()
with torch.no_grad():
    y_pred = model(X_test_tensor)
    test_loss = criterion(y_pred, y_test_tensor)
    print(f'\nTest MSE: {test_loss.item():.4f}')
    
    # Convert to numpy for plotting
    y_pred_np = y_pred.numpy().flatten()
    y_test_np = y_test_tensor.numpy().flatten()

# Enhanced Visualization Section
plt.figure(figsize=(15, 10))

# 1. Training Loss Plot
plt.subplot(2, 2, 1)
plt.plot(train_losses)
plt.title('Training Loss Over Time')
plt.xlabel('Epoch')
plt.ylabel('MSE Loss')
plt.grid(True)

# 2. Predicted vs Actual Scatter Plot
plt.subplot(2, 2, 2)
plt.scatter(y_test_np, y_pred_np, alpha=0.5)
plt.plot([y_test_np.min(), y_test_np.max()], 
         [y_test_np.min(), y_test_np.max()], 
         'r--', lw=2)  # Perfect prediction line
plt.title('Predicted vs Actual House Prices')
plt.xlabel('Actual Price ($100,000)')
plt.ylabel('Predicted Price ($100,000)')
plt.grid(True)

# 3. Actual Prices Plot
plt.subplot(2, 2, 3)
plt.scatter(range(len(y_test_np)), y_test_np, alpha=0.5, color='blue')
plt.title('Actual House Prices')
plt.xlabel('Sample Index')
plt.ylabel('Price ($100,000)')
plt.grid(True)

# 4. Predicted Prices Plot
plt.subplot(2, 2, 4)
plt.scatter(range(len(y_pred_np)), y_pred_np, alpha=0.5, color='green')
plt.title('Predicted House Prices')
plt.xlabel('Sample Index')
plt.ylabel('Price ($100,000)')
plt.grid(True)

plt.tight_layout()
plt.show()

# Print sample comparisons
print("\nSample Predictions vs Actual Values:")
for i in range(5):
    print(f"Sample {i+1} - Predicted: {y_pred_np[i]:.2f}, Actual: {y_test_np[i]:.2f}")

# Calculate and print correlation coefficient
correlation = np.corrcoef(y_test_np, y_pred_np)[0, 1]
print(f"\nCorrelation coefficient between predicted and actual values: {correlation:.4f}")
